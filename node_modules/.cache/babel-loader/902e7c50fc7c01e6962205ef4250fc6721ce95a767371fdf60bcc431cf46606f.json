{"ast":null,"code":"import axios from'axios';// Define base URL for API endpoints\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add request interceptor to include auth token for all requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers['Authorization']=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Authentication services\nexport const authService={login:async(username,password)=>{const response=await api.post('/auth/login',{username,password});return response.data;}};// Salary processing services\nexport const salaryService={// Process salary data and get JSON results\nprocessSalary:async file=>{const formData=new FormData();formData.append('file',file);const response=await api.post('/salary/process',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data.employeeResults||response.data;},// Generate PDF for a specific employee\ngeneratePdf:async employeeId=>{const response=await api.get(\"/salary/pdf/\".concat(employeeId),{responseType:'blob'// Important for handling binary data\n});return response;},// Generate and download PDF salary slips in bulk\ngeneratePDFs:async file=>{const formData=new FormData();formData.append('file',file);const response=await api.post('/salary/generate-pdf',formData,{headers:{'Content-Type':'multipart/form-data'},responseType:'blob'// Important for handling binary data\n});// Create a download link for the ZIP file\nconst url=window.URL.createObjectURL(new Blob([response.data]));const link=document.createElement('a');link.href=url;// Get filename from response headers if available\nconst contentDisposition=response.headers['content-disposition'];let filename='salary_slips.zip';if(contentDisposition){const filenameMatch=contentDisposition.match(/filename=\"(.+)\"/);if(filenameMatch&&filenameMatch.length===2){filename=filenameMatch[1];}}link.setAttribute('download',filename);document.body.appendChild(link);link.click();link.remove();},// Process salary and get both JSON results and PDF data\nprocessSalaryWithPDF:async file=>{const formData=new FormData();formData.append('file',file);const response=await api.post('/salary/process-with-pdf',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","concat","error","Promise","reject","authService","login","username","password","response","post","data","salaryService","processSalary","file","formData","FormData","append","employeeResults","generatePdf","employeeId","get","responseType","generatePDFs","url","window","URL","createObjectURL","Blob","link","document","createElement","href","contentDisposition","filename","filenameMatch","match","length","setAttribute","body","appendChild","click","remove","processSalaryWithPDF"],"sources":["/Users/vsalokhe/CascadeProjects/salary-processor-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Define base URL for API endpoints\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include auth token for all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Authentication services\nexport const authService = {\n  login: async (username, password) => {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n};\n\n// Salary processing services\nexport const salaryService = {\n  // Process salary data and get JSON results\n  processSalary: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/salary/process', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.employeeResults || response.data;\n  },\n  \n  // Generate PDF for a specific employee\n  generatePdf: async (employeeId) => {\n    const response = await api.get(`/salary/pdf/${employeeId}`, {\n      responseType: 'blob', // Important for handling binary data\n    });\n    return response;\n  },\n  \n  // Generate and download PDF salary slips in bulk\n  generatePDFs: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/salary/generate-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      responseType: 'blob', // Important for handling binary data\n    });\n    \n    // Create a download link for the ZIP file\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    \n    // Get filename from response headers if available\n    const contentDisposition = response.headers['content-disposition'];\n    let filename = 'salary_slips.zip';\n    \n    if (contentDisposition) {\n      const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n      if (filenameMatch && filenameMatch.length === 2) {\n        filename = filenameMatch[1];\n      }\n    }\n    \n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  },\n  \n  // Process salary and get both JSON results and PDF data\n  processSalaryWithPDF: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/salary/process-with-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}