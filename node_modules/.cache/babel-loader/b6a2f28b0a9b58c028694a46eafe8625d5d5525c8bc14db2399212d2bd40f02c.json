{"ast":null,"code":"import axios from 'axios';\n\n// Define base URL for API endpoints\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://salary-processor-backend.onrender.com/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token for all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Authentication services\nexport const authService = {\n  login: async (username, password) => {\n    const response = await api.post('/auth/login', {\n      username,\n      password\n    });\n    return response.data;\n  }\n};\n\n// Salary processing services\nexport const salaryService = {\n  // Process salary data and get JSON results\n  processSalary: async (file, totalDays) => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // If totalDays is provided, include it in the URL\n    let url = '/salary/process';\n    if (totalDays) {\n      url = `/salary/process?totalDays=${totalDays}`;\n    }\n    const response = await api.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.employeeResults || response.data;\n  },\n  // Set the total working days\n  setTotalWorkingDays: async days => {\n    const response = await api.post(`/salary/set-total-days?days=${days}`);\n    return response.data;\n  },\n  // Get the current total working days\n  getTotalWorkingDays: async () => {\n    const response = await api.get('/salary/total-days');\n    return response.data;\n  },\n  // Generate PDF for a specific employee\n  generatePdf: async employeeId => {\n    const response = await api.get(`/salary/pdf/${employeeId}`, {\n      responseType: 'blob' // Important for handling binary data\n    });\n    return response;\n  },\n  // Generate and download PDF salary slips in bulk\n  generatePDFs: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/salary/generate-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      responseType: 'blob' // Important for handling binary data\n    });\n\n    // Create a download link for the ZIP file\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Get filename from response headers if available\n    const contentDisposition = response.headers['content-disposition'];\n    let filename = 'salary_slips.zip';\n    if (contentDisposition) {\n      const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n      if (filenameMatch && filenameMatch.length === 2) {\n        filename = filenameMatch[1];\n      }\n    }\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  },\n  // Process salary and get both JSON results and PDF data\n  processSalaryWithPDF: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/salary/process-with-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","authService","login","username","password","response","post","data","salaryService","processSalary","file","totalDays","formData","FormData","append","url","employeeResults","setTotalWorkingDays","days","getTotalWorkingDays","get","generatePdf","employeeId","responseType","generatePDFs","window","URL","createObjectURL","Blob","link","document","createElement","href","contentDisposition","filename","filenameMatch","match","length","setAttribute","body","appendChild","click","remove","processSalaryWithPDF"],"sources":["/Users/vsalokhe/CascadeProjects/salary-processor-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Define base URL for API endpoints\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://salary-processor-backend.onrender.com/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include auth token for all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Authentication services\nexport const authService = {\n  login: async (username, password) => {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n};\n\n// Salary processing services\nexport const salaryService = {\n  // Process salary data and get JSON results\n  processSalary: async (file, totalDays) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // If totalDays is provided, include it in the URL\n    let url = '/salary/process';\n    if (totalDays) {\n      url = `/salary/process?totalDays=${totalDays}`;\n    }\n    \n    const response = await api.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.employeeResults || response.data;\n  },\n  \n  // Set the total working days\n  setTotalWorkingDays: async (days) => {\n    const response = await api.post(`/salary/set-total-days?days=${days}`);\n    return response.data;\n  },\n  \n  // Get the current total working days\n  getTotalWorkingDays: async () => {\n    const response = await api.get('/salary/total-days');\n    return response.data;\n  },\n  \n  // Generate PDF for a specific employee\n  generatePdf: async (employeeId) => {\n    const response = await api.get(`/salary/pdf/${employeeId}`, {\n      responseType: 'blob', // Important for handling binary data\n    });\n    return response;\n  },\n  \n  // Generate and download PDF salary slips in bulk\n  generatePDFs: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/salary/generate-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      responseType: 'blob', // Important for handling binary data\n    });\n    \n    // Create a download link for the ZIP file\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    \n    // Get filename from response headers if available\n    const contentDisposition = response.headers['content-disposition'];\n    let filename = 'salary_slips.zip';\n    \n    if (contentDisposition) {\n      const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n      if (filenameMatch && filenameMatch.length === 2) {\n        filename = filenameMatch[1];\n      }\n    }\n    \n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  },\n  \n  // Process salary and get both JSON results and PDF data\n  processSalaryWithPDF: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/salary/process-with-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}